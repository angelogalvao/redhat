<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf" 
	xmlns:cxf="http://cxf.apache.org/blueprint/core"
	xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs" 
	xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                                          
						http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd                                          
						http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
						http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
						http://cxf.apache.org/blueprint/jaxws http://cxf.apache.org/blueprint/jaxws.xsd
						http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd">

	<!-- Configurações do CXF: Endpoints JAX-WS -->
	<bean id="soapInterceptor"
		  class="com.redhat.brazil.consulting.fuse.webservices.soap.PessoaSOAPServiceInterceptor" />
		  
	<jaxws:endpoint address="/PessoaService" id="pessoaSOAPService" 
		implementor="com.redhat.brazil.consulting.fuse.webservices.soap.PessoaSOAPServiceImpl">
		<jaxws:properties>
			<entry key="schema-validation-enabled" value="BOTH" />
		</jaxws:properties>
		<jaxws:features>
			<ref component-id="commonValidationFeature" />
		</jaxws:features>
		
		<jaxws:inInterceptors>
			<ref component-id="soapInterceptor" />
		</jaxws:inInterceptors>
	</jaxws:endpoint>
	
	<!-- Configurações do CXF: JAX-RS -->
	<jaxrs:server address="/rest" id="porto-conecta-piloto-jaxrs-server">
		<jaxrs:serviceBeans>
			<ref component-id="pessoaRESTService" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />
			<ref component-id="beanValidationExceptionMapper" />
			<ref component-id="applicationExceptionMapper" />
			<ref component-id="systemExceptionMapper" />
		</jaxrs:providers>
		<jaxrs:features>
			<bean class="io.fabric8.cxf.endpoint.SwaggerFeature">
				<property name="title" value="Porto Conecta - Piloto - JAXRS Service" />
				<property name="description" value="Exemplo de serviço REST" />
				<property name="version" value="${project.version}" />
			</bean>
			<ref component-id="commonValidationFeature" />
		</jaxrs:features>
	</jaxrs:server>
	
	<!-- Definição das implementações dos serviços REST -->
	<bean id="pessoaRESTService" class="com.redhat.brazil.consulting.fuse.webservices.rest.PessoaRESTServiceImpl" />

	<!-- Mapeamento das exceções dos serviços REST -->
	<bean
		class="com.redhat.brazil.consulting.fuse.webservices.rest.ApplicationExceptionMapper"
		id="applicationExceptionMapper"  />
	<bean
		class="com.redhat.brazil.consulting.fuse.webservices.rest.SystemExceptionMapper"
		id="systemExceptionMapper" />

	<!-- Configurações a feature de Bean Validation - JAX-RS e JAX-WS -->
	<bean class="org.apache.cxf.jaxrs.validation.ValidationExceptionMapper"
		id="beanValidationExceptionMapper" />
	<bean class="org.apache.cxf.validation.BeanValidationFeature" id="commonValidationFeature">
		<property name="provider" ref="beanValidationProvider" />
	</bean>
	<bean class="org.apache.cxf.validation.BeanValidationProvider" id="beanValidationProvider">
		<argument ref="validationProviderResolver" />
	</bean>
	<bean
		class="com.redhat.brazil.consulting.fuse.validation.HibernateValidationProviderResolver"
		id="validationProviderResolver" />

	<!-- Propriedade dinamicas do arquivo de configuraçõo - PersistenseID (Blueprint) -->
	<cm:property-placeholder id="com.redhat.brazil.consulting.fuse"
		persistent-id="com.redhat.brazil.consulting.fuse">
		<cm:default-properties>
			<cm:property name="broker.url" value="vm://amq?broker.persistent=false" />
			<cm:property name="broker.username" value="" />
			<cm:property name="broker.password" value="" />
		</cm:default-properties>
	</cm:property-placeholder>
	
	<reference id="osgiJtaTransactionManager"
               interface="javax.transaction.TransactionManager"/>
	
	<reference id="osgiPlatformTransactionManager"
        interface="org.springframework.transaction.PlatformTransactionManager"/>
        
    <reference id="recoverableTxManager"
        interface="org.apache.geronimo.transaction.manager.RecoverableTransactionManager" availability="mandatory"/>
 
     <bean id="jmsXaConnectionFactory"
          class="org.apache.activemq.ActiveMQXAConnectionFactory">
        <property name="brokerURL" value="${broker.url}" />
		<property name="userName" value="${broker.username}" />
		<property name="password" value="${broker.password}" />
        <property name="redeliveryPolicy">
            <bean class="org.apache.activemq.RedeliveryPolicy">
                <property name="maximumRedeliveries" value="0"/>
            </bean>
        </property>
    </bean>
	
	 <bean id="jmsXaPoolConnectionFactory"
          class="org.apache.activemq.pool.JcaPooledConnectionFactory">
        <property name="name" value="MyXaResourceName"/>
        <property name="maxConnections" value="8"/>
        <property name="connectionFactory" ref="jmsXaConnectionFactory"/>
        <property name="transactionManager" ref="recoverableTxManager"/>
    </bean>
	
	<bean id="jmsTxConfig"
          class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="jmsXaPoolConnectionFactory"/> 
        <property name="transactionManager" ref="osgiPlatformTransactionManager"/> 
        <property name="transacted" value="false"/>
        <property name="cacheLevelName" value="CACHE_CONNECTION"/>
        <property name="concurrentConsumers" value="10"/>
    </bean> 
	

	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" >
		<property name="configuration" ref="jmsTxConfig" />
	</bean>

	<!-- Serviço que receberá mensagens do broker -->
	<bean id="pessoaService"
		class="com.redhat.brazil.consulting.fuse.messaging.jms.PessoaService" />
		
	<bean id="pessoaRestTransform"
		class="com.redhat.brazil.consulting.fuse.webservices.rest.PessoaRestTransform" />
		
		
	<!--  Define a interface REST (EXPOEM) -->	
	<camel-cxf:rsServer  id="pessoa-api" address="/api/camel/rest" serviceClass="com.redhat.brazil.consulting.fuse.webservices.rest.PessoaRESTService">
		<camel-cxf:providers>
			<bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />
		</camel-cxf:providers>
		<camel-cxf:features>
			<!-- Habilita o Swagger -->
			<bean class="io.fabric8.cxf.endpoint.SwaggerFeature">
				<property name="title" value="JAXRS Service" />
				<property name="description" value="Foo REST" />
				<property name="version" value="${project.version}" />
			</bean>
		</camel-cxf:features>
	</camel-cxf:rsServer>
	
	<!--  Define a interface REST (Producer) -->
	<camel-cxf:rsClient id="test-rs-producer" 
		address="https://httpbin.org" >
		<camel-cxf:providers>
			<bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />
		</camel-cxf:providers>
	</camel-cxf:rsClient>	
	
	<camel-cxf:cxfEndpoint address="/api/camel/PessoaService" id="pessoa-camel-ws" 
		serviceClass="com.redhat.brazil.consulting.fuse.webservices.soap.PessoaSOAPService"  />
		
	<camel-cxf:cxfEndpoint address="http://frameworkh.portoseguroconecta.com.br/GerenciarContratosService" id="gerenciar-contrato-ws" 
		serviceClass="br.com.portoconecta.services.gerenciarcontratos.GerenciarContratosService"  />
		
		
	<camelContext id="test-fuse-architecture-context-ws"
		 xmlns="http://camel.apache.org/schema/blueprint">
	
		<route id="test-ws-enpoint">
			<from uri="cxf:bean:pessoa-camel-ws"/>
			<log message="IP ${body[1]} " />
			<bean ref="pessoaService" method="describePessoa" />
		</route>
		
		<route id="test-ws-producer">
			<from uri="activemq:queue:obter-contrato-ws"/>
			<bean ref="obterContratoTransform" method="prepararObterContratorRequest" />
			<setHeader headerName="operationName">
				<constant>ObterContrato</constant>
			</setHeader>
			<to uri="cxf:bean:gerenciar-contrato-ws"/>
			<bean ref="obterContratoTransform" method="lerResponse" />
		</route>
	
	</camelContext>	 
	
	
	<camelContext id="test-fuse-architecture-context-rs"
		 xmlns="http://camel.apache.org/schema/blueprint">
		 
		 
		 <dataFormats>
			<json id="pessoa-data-format-rs" library="Jackson"
				unmarshalTypeName="com.redhat.brazil.consulting.fuse.model.Pessoa" />

			<xmljson id="xmljson-data-format-rs" />
		</dataFormats>
		 
		<onException>
			<exception>java.lang.Exception</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="systemExceptionMapper" method="toResponseCamel" />
		</onException>
		
		<onException>
			<exception>com.redhat.brazil.consulting.fuse.exception.ApplicationException</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<bean ref="applicationExceptionMapper" method="toResponseCamel" />
		</onException>
		 
		 <route id="test-rest-enpoint">
			<from uri="cxfrs:bean:pessoa-api"/>
			<bean ref="pessoaRestTransform" method="transform" />
			<marshal ref="pessoa-data-format-rs" />
			<to uri="activemq:queue:pessoa-describe?disableReplyTo=true" />
		</route>
		 
	</camelContext>

	<!-- Rotas CAMEL -->
	<camelContext id="test-fuse-architecture-context-amq" 
		 xmlns="http://camel.apache.org/schema/blueprint">
		

		<dataFormats>
			<!-- Formato que pega a informação que esta no header da mensagem - -->
			<json id="pessoa-data-format" library="Jackson"
				unmarshalTypeName="com.redhat.brazil.consulting.fuse.model.Pessoa" />

			<xmljson id="xmljson-data-format" />
		</dataFormats>
		
		<onException useOriginalMessage="true"  >
			<exception>java.lang.Exception</exception>
			<redeliveryPolicy maximumRedeliveries="2" 
				redeliveryDelay="500" logHandled="false" asyncDelayedRedelivery="true" />
				
			<handled>
				<constant>true</constant>
			</handled>
			
			<setExchangePattern pattern="InOnly"/>
			
			<process ref="messageExceptionHandler" />
			
     		 <recipientList>
     		 	<header>DLQ_Destination</header>
     		 </recipientList>
		</onException>
		
		<route id="teste-producer-rs">
			<from uri="activemq:queue:test-rs-producer-queue" />
			<setHeader headerName="CamelHttpMethod">
				<constant>GET</constant>
			</setHeader>
			<setHeader headerName="CamelCxfRsUsingHttpAPI">
				<constant>true</constant>
			</setHeader>
			<setHeader headerName="CamelCxfRsResponseClass">
				<constant>com.redhat.brazil.consulting.fuse.webservices.rest.TestRsProducerResponse</constant>
			</setHeader>
			<setHeader headerName="CamelHttpPath">
				<constant>/get</constant>
			</setHeader>
			<setHeader headerName="CamelHttpQuery">
				<simple>nome=${body}</simple>
			</setHeader>
			<setExchangePattern pattern="InOut"/>
			<transform>
				<simple>${null}</simple>
			</transform>
			<to uri="cxfrs://bean://test-rs-producer"/>
			<process ref="testRsProducerProcessor" />
		</route>
		
		 
		 <route id="describe-pessoa-route">
			<from uri="activemq:queue:pessoa-describe" />
			<unmarshal ref="pessoa-data-format" />
			<to uri="bean-validator://foo?validationProviderResolver=#validationProviderResolver"/>
			<bean ref="pessoaService" method="describePessoa" />
			<log message="Result: ${body}" />
		</route>

		 
		<route id="testeMensagemAgendadaConversao">
			<from uri="activemq:testeMensagemAgendadaConversaoIn" />
			<log message="Agendando: ${body}" />
			<setHeader headerName="AMQ_SCHEDULED_DELAY">
				<constant>30000</constant>
			</setHeader>
			<to uri="activemq:testeMensagemAgendadaConversaoOut?timeToLive=60000" />
		</route>
		



		<route id="convert-json-to-xml">
			<from uri="activemq:queue:json-to-xml" />
			<log message="Original: ${body}" />
			<unmarshal ref="xmljson-data-format" />
			<log message="Converted: ${body}" />
			<marshal ref="xmljson-data-format" />
			<log message="Converted again: ${body}" />
		</route>
		
		<route id="convert-xml-to-json">
			<from uri="activemq:queue:xml-to-json" />
			<log message="Original: ${body}" />
			<marshal ref="xmljson-data-format" />
			<log message="Converted: ${body}" />
			<unmarshal ref="xmljson-data-format" />
			<log message="Converted again: ${body}" />
		</route>
		
		
		<!-- <route id="call-remote-soap-service"> <from uri=""/> </route> -->

		<!-- <route id="deadLetterQueueHanlderRoute"> <from uri="activemq:queue:DLQ"/> 
			<log message="Messagem com erro: ${body}" /> </route> -->


	</camelContext>

	<!-- Handler de erro da mensagem -->
	<bean id="messageExceptionHandler"
		class="com.redhat.brazil.consulting.fuse.messaging.jms.MessageExceptionHandler" />
		
		
	<bean id="testRsProducerProcessor"
		class="com.redhat.brazil.consulting.fuse.webservices.rest.TestRsProducerProcessor" />
		
	<bean id="obterContratoTransform"
		class="com.redhat.brazil.consulting.fuse.webservices.soap.ObterContratoTransform" />

</blueprint>

