<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
 
  <display-name>Camel Bootstrap</display-name>
 
  <!-- you can configure any of the properties on CamelContext, eg setName will be configured as below -->
  <context-param>
    <param-name>name</param-name>
    <param-value>CamelBootstrap</param-value>
  </context-param>
 
  <!-- location of Camel route xml files -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <!-- define the routes as a resource from the classpath by prefixing the value with classpath: -->
    <!-- note: instead of using a XML file we can also define the routes in Java code in a RouteBuilder class -->
    <param-value>/WEB-INF/classes/META-INF/spring/camel-config.xml</param-value>
  </context-param>
   <!-- <context-param>
    define a lifecycle which could help user to setup the registry which could be use as a reference in camel route -->
    <!-- If you use org.apache.camel.component.servletlistener.JndiCamelServletContextListener then the CamelContextLifecycle
     must use the JndiRegistry as well. And likewise if the servlet is org.apache.camel.component.servletlistener.SimpleCamelServletContextListener 
     then the CamelContextLifecycle must use the SimpleRegistry 
    <param-name>CamelContextLifecycle</param-name>
    <param-value>org.apache.camel.example.servletlistener.MyLifecycle</param-value>
  </context-param>
 -->
  <!-- the listener that kick-starts Camel -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
 
  <!-- Camel servlet mapping 
  <servlet-mapping>
    <servlet-name>CamelServlet</servlet-name>
    <url-pattern>/camel/*</url-pattern>
  </servlet-mapping>-->
 
</web-app>